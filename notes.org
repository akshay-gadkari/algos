#+TITLE:Notes
* event queues
- /event queue/ - while loop running all the time looking for messages
#+DATE:2019-08-19
- if there's nothing on the call stack, it does nothing
- if you click a button (for example), event listeners waiting for user interaction like onClick
#+BEGIN_SRC js
console.log('hi');
#+END_SRC

#+RESULTS:
: hi
: undefined
* patterns
#+DATE:2019-08-20
- /patterns/ - e.g. loops are a pattern for iteration
  + given an array of integers, find the max value
    * iterate through the array
    * keep a current max value
    * if we see a value more than current max, update max with that value
  + code
    #+BEGIN_SRC python :results output
      arr = [1, 2, 3, 5, 4]

      for i in range(len(arr)):
          if i == 0:
              max = arr[i]
          else:
              if arr[i] > max:
                  max = arr[i]
      print(max)
    #+END_SRC
    
    #+RESULTS:
    : 5
- /data structures/ - patterns that give you some specific functionality
  + e.g. arrays give you list like operations
- reduce method on arrays
  + Array.reduce in JS
  + we use reduce to return a single thing from the values in an array, like a sum function
    #+BEGIN_SRC js
    const array1 = [1, 2, 5, 4, 3];
    const reducer = (accumulator, currentValue) => accumulator + currentValue;
    console.log(array1.reduce(reducer));
    #+END_SRC

    #+RESULTS:
    : 10
    : undefined
  + also can do get max in a reducer
    #+BEGIN_SRC js
      const arr = [1, 4, 6, 5, 3];
      function getMax(arr) {
          return arr.reduce((acc, curr) => {
              if (curr > acc) {
                  acc = curr;
              }
              return acc;
          });
      }
      console.log(getMax(arr));
    #+END_SRC

    #+RESULTS:
    : 6
    : undefined
  + sums
    #+BEGIN_SRC js
      const arr = [1, 4, 6, 5, 3];
      function sum(arr) {
          let total = 0;
          for (let i = 0; i < arr.length; i++) {
              total += arr[i];
          }
          return total;
      }
      console.log(sum(arr));
    #+END_SRC

    #+RESULTS:
    : 19
    : undefined
  + string concatenation
    #+BEGIN_SRC js
      arr = [1, 2, 3];
      function stringConcat(arr) {
          return arr.reduce((acc, curr) => {
              acc += curr;
              return acc;
          }, ""); //accumulator initializes to an empty string
      }
      console.log(stringConcat(arr));
    #+END_SRC

    #+RESULTS:
    : 123
    : undefined
- homework
  1. flatten
     + Write a function that flattens an array that may be nested arbitrarily deep. 
     + For example, given the following:
     + [1, 2, 3, [1, 2, 3, 4, [2, 3, 4]]]

     + Your function should return:
     + [1, 2, 3, 1, 2, 3, 4, 2, 3, 4]
     + Your solution should make use of the Array.reduce method.

       #+BEGIN_SRC js
         const arr = [1, 2, 3, [1, 2, 3, 4, [2, 3, 4]]];
         function flatten(arr) {
             return arr.reduce((acc, curr) => {
                 if (Array.isArray(curr)) {
                     acc.concat(flatten(curr));
                 }
                 else {
                     acc.concat(curr);
                 }
             }, []);
             return acc;
         }
         console.log(flatten(arr));
       #+END_SRC

       #+RESULTS:
  2. voterResults
     + Write a function that, given an array of voter objects, returns an object summarizing the results of the vote.

       #+BEGIN_SRC js
         const voters = [
             {name:'Bob' , age: 30, voted: true},
             {name:'Jake' , age: 32, voted: true},
             {name:'Kate' , age: 25, voted: false},
             {name:'Sam' , age: 20, voted: false},
             {name:'Phil' , age: 21, voted: true},
             {name:'Ed' , age:55, voted:true},
             {name:'Tami' , age: 54, voted:true},
             {name: 'Mary', age: 31, voted: false},
             {name: 'Becky', age: 43, voted: false},
             {name: 'Joey', age: 41, voted: true},
             {name: 'Jeff', age: 30, voted: true},
             {name: 'Zack', age: 19, voted: false}
         ];

         function voterResults(voters) {
             const results = {
                 youth: 0
             };

             return voters.reduce((acc, curr) => {
                 if (18 <= curr.age <= 25) {
                     acc.youth += 1;
                 }
                 return acc;
             }, results);
         }
       #+END_SRC

       #+RESULTS:
       : undefined

#+BEGIN_SRC js
  //test
  const voters = [
      {name:'Bob' , age: 30, voted: true},
      {name:'Jake' , age: 32, voted: true},
      {name:'Kate' , age: 25, voted: false},
      {name:'Sam' , age: 20, voted: false},
      {name:'Phil' , age: 21, voted: true},
      {name:'Ed' , age:55, voted:true},
      {name:'Tami' , age: 54, voted:true},
      {name: 'Mary', age: 31, voted: false},
      {name: 'Becky', age: 43, voted: false},
      {name: 'Joey', age: 41, voted: true},
      {name: 'Jeff', age: 30, voted: true},
      {name: 'Zack', age: 19, voted: false}
  ];

  function voterResults(voters) {
      // Your code here
      const results = {
          youngVotes: 0,
          youth: 0,
          midVotes: 0,
          mids: 0,
          oldVotes: 0,
          olds: 0
      };

      return voters.reduce((acc, curr) => {
          if (curr.age >= 18 && curr.age <= 25) {
              acc.youth++;
              if (curr.voted) {
                  acc.youngVotes++;
              }
          } else if (curr.age >= 26 && curr.age <= 35) {
              acc.mids++;
              if (curr.voted) {
                  acc.midVotes++;
              }
          } else if (curr.age >= 36 && curr.age <= 55) {
              acc.olds++;
              if (curr.voted) {
                  acc.oldVotes++;
              }
          }
          console.log(results);
          return acc;
      }, results);
  }
#+END_SRC

#+RESULTS:
: undefined

* call stack and message queue
#+DATE:2019-08-21

#+BEGIN_SRC js
  console.log(1);

  setTimeout(()=> {
      console.log(2);
  }, 1000);

  console.log(3);
#+END_SRC

#+RESULTS:
: 1
: 3
: undefined2

- /callback functions/ - function that's executed after another function has finished executing
- /method/ - function on an object
  #+BEGIN_SRC js
    function foo() {} // function declaration
    const x = function() {}; // function expression
    const y = () => {};// function expression with an arrow function
    const obj = {foo: function() {} }; // function expression with an anonymous function
    const functions = [() => {console.log('hi')}, function() {}]; //anonymous function in an array
    functions[0]();

    // cb down here in outer(cb) is the parameter
    function outer(cb) { //function declaration with a callback function parameter
        cb();
    }

    outer(() => {           //() => {
        console.log('hi');  //console.log('hi');   <- this whole thing is the callback in outer(cb)
    });                     //}

    console.log(1);
    
    setTimeout(() => {
        console.log(2);
    }, 1000);

    console.log(3);
  #+END_SRC

  #+RESULTS:
  : hi
  : hi
  : 1
  : 3
  : undefined2
  + when the call stack is done, the event loop checks the message queue and sees if there are any new functions to call
  + once 1000 ms passes, a new message gets added to the queue
  + the event loop (which is constatnly running) sees it and invokes the call stack
  + calls setTimeout, which calls outer, which calls console.log
    * console.log finishes, then outer finishes, then setTimeout finishes
  + message queue can get slow if there's different messages
    * a message that's slow to process takes a long time, then the new messages can't get through
    * causes a lot of lag
* Calculator Widget
#+DATE:2019-08-22

#+BEGIN_SRC js
  class TodoApp extends React.Component {
      constructor(props) {
          super(props)
          this.state = {
              items: [
                  { text: "Learn JavaScript", done: false },
                  { text: "Learn React", done: false },
                  { text: "Play around in JSFiddle", done: true },
                  { text: "Build something awesome", done: true }
              ]
          }
      }
    
      render() {
          return (
                  <div class="App">
                  <table>
                  <tr>
                  <button class="col">7</button>
                  <button class="col">8</button>
                  <button class="col">9</button>
                  <button class="col">/</button>
                  </tr>
                  </table>
                  </div>
          )
      }
  }

  ReactDOM.render(<TodoApp />, document.querySelector("#app"))
#+END_SRC
* functions
#+DATE:2019-08-23
- /first class function/ - functions can be passed as arguments to other functions
  #+BEGIN_SRC js
  const x = 5;
  const y = function() {}; // assign to variable
  const nums = [1,2,3,4,5];
  const functions = [() => {}, function() {}, function foo() {}]; //put in array

  function outer(cb) {
      cb();
  } //callback function

  outer(() => {
      console.log('hi');
  });

  cosnt obj = {
      foo: function() {}
  };

  function factory() { //HOF - higher order function
      const message = 'hi';
      return function() {
          console.log(message); // closure
      };
  }

  const newFunction = factory();

  newFunction();
#+END_SRC
- express follows a pattern like this:
  #+BEGIN_SRC js
  function httpHelper(options) {
      return {
          get: function() {
              console.log(`making GET request to ${url} with ${params}`);
          },
          post: function() {
              console.log(`making POST request to ${url} with ${params} and data ${data}`);
          }
      };
  }

  const googleApiHelper = httpHelper({
      url: 'whatever.google.com',
      params: null
  });

  googleApiHelper.get();
  googleApiHelper.post('hello');

  const dbHelber = httpHelper({
      url: '34134.mongodb.com',
      params: null
  });

  dbHelper.post('new user');
#+END_SRC
- IIFE:
  #+BEGIN_SRC js
  const arr = [10, 12, 15, 21];
  for (var i = 0; i < arr.length; i++) {
      (function(i) {
          setTimeout(function() {
              console.log('Index: ' + i + ', element: ' + arr[i]);
          }, 1000);
      })(i); //IIFE
  }
#+END_SRC
  #+RESULTS:
: undefinedIndex: 0, element: 10
: Index: 1, element: 12
: Index: 2, element: 15
: Index: 3, element: 21
- /block scope/ - each iteration of the for loop creates its own scope
- /block/ - set of opening and closing curly braces
- block scope using *let* instead of *var*
  #+BEGIN_SRC js
  const arr = [10, 12, 15, 21];
  for (let i = 0; i < arr.length; i++) {
      setTimeout(function() {
          console.log('Index: ' + i + ', element: ' + arr[i]);
      }, 1000);
  }

#+END_SRC

  #+RESULTS:
: undefinedIndex: 0, element: 10
: Index: 1, element: 12
: Index: 2, element: 15
: Index: 3, element: 21
- add6 function
  #+BEGIN_SRC js
        function createBase(x) {
            return function(y) {
                return x + y;
            };
        }

        let add6 = createBase(6);
        console.log(add6(10));
  #+END_SRC

  #+RESULTS:
  : 16
  : undefined
* linked lists
#+DATE:2019-08-26
- example of linked list
  #+BEGIN_SRC js
    const x = {
        prop1: 5,
        next: 'z'
    };
    //const y = x; //there is a single object, but now y AND x both reference that object

    const y = {
        prop1: 'hello',
        next: x
    };

    console.log(y.next);
  #+END_SRC

  #+RESULTS:
  : { prop1: 5, next: 'z' }
  : undefined
- big O notation
  + O(n) is constant time
- linked lists are good at sorting unsorted data
  + easier to build out a linekd list from unsorted data, then converting it into an array
- JS doesn't really need a linked list, cause JS is more like a hash table
- ll with 3 nodes
  #+BEGIN_SRC js
    const head = {
        next: null,
        data: 'hi'
    };

    const middle = {
        next: null,
        data: 'hello'
    };

    const tail = {
        next: null,
        data: 'hey'
    };

    head.next = middle; //override the next: null property and set next to the next object
    middle.next = tail;
  #+END_SRC
  + head, middle , and tail are 3 objects that occupy 3 different locations on the heap
- ll with 3 nodes, but nested
  + you can copy these out and visualize them inside of each other
     #+BEGIN_SRC js
       const head = {
           next: {
               next: {
                   next: null,
                   data: 'hey'
               },
               data: 'hello'
           },
           data: 'hi'
       };
       console.log(head);
     #+END_SRC

     #+RESULTS:
     : undefined
- class for LL
  #+BEGIN_SRC js
    class LinkedList {
        constructor() {
            this.head = null;
            this.tail =  null;
        }

        addNode(value) {
            const node = {
                next: null,
                data: null
            };

            if (this.head === null) {
                this.head = newNode;
                this.tail = newNode;
                return;
            }

            // let pointer = this.head;
            // while (pointer.next != null) {
            //     pointer = pointer.next;
            // }
            // pointer.next = newNode;

            this.tail.next = newNode;
            this.tail = newNode;
            return;
        }
    }

    const list = new LinkedList();
    list.addNode('a', 1);
    list.addNode('b', 1);

    console.log(list);
  #+END_SRC

  #+RESULTS:
* linked list iteration
#+DATE:2019-08-27
- ll without overarching linked list class
  #+BEGIN_SRC js
    class Node {
        constructor(value, next=null) {
            this.value = value;
            this.next = next;
        }
    }

    const ll = new Node(1);
    ll.next = new Node(2);
    ll.next.next = new Node(3);
    ll.next.next.next = new Node(4);
    ll.next.next.next.next = new Node(5);
    ll.next.next.next.next.next = new Node(-1);
    ll.next.next.next.next.next.next = null;

    // define a linked list print function
    function printLinkedList(node) {
        // can't use a for loop (no index exists)
        // usually use a while loop for iteration
        // that'll be combined with a reference that indicates our current node as we traverse the list
        let current = node;
        while (current) {
            console.log(current.value);
            current = current.next;
        }
    }
    //printLinkedList(ll);

    function printLinkedListLessThanFive(node) {
        let current = node;
        while (current) {
            if (current.value < 5) {
                console.log(current.value);
            }
            current = current.next;
        }
    }
    //printLinkedListLessThanFive(ll);

    function linkedListForEach(node, cb) {
        // iterate along each linked list
        let current = node;
        while (current) {
            cb(current); // invoke cb on the current node
            current = current.next; // update the current reference
        }
    }

    // linkedListForEach(ll, (node) => {
    //     if (node.value < 5) {
    //         console.log(node.value);
    //     }
    // });

    // function reverseLin
    kedList(node) {
        // take a reference to the current node
        let current = node;
        // init a previous node to null
        let previous = null;
        // loop through our linked list
        while (current) {
            // take a refrerence to the current node's next node
            let next = current.next;
            // now we can set current.next = previous
            // flipping the direction fo the node
            current.next = previous;
            // update our references
            // set previous = current
            previous = current;
            current = next;
        }
        // return the new head
        return previous;
    }

    const reversed = reverseLinkedList(ll);
    linkedListForEach(reversed, (node) => console.log(node.value));
    reverseLinkedList(ll);
  #+END_SRC

  #+RESULTS:
  : 1
  : 2
  : 3
  : 4
  : -1
  : undefined

* Big O and linked lists
#+DATE:2019-08-28
- O(n) time
  #+BEGIN_SRC js
    const input = [];

    for (let i = 0; i <= 100; i++) {
        input.push(i);
    }

    console.log(input.length);
  #+END_SRC

  #+RESULTS:
  : 101
  : undefined
- /O(log n)/ - logarithmic complexity works well with large data sets (even better than linear)
  #+BEGIN_SRC js
    const input = [1,2,3,4,5,6];
    for (let i = 0; i < input.length; i++) {
        i += Math.floor((input.length - i) / 2);
        console.log(input[i]);
    }
  #+END_SRC

  #+RESULTS:
  : 4
  : 6
  : undefined
- /O(n^2)/ - if there's 10 items in the input, 100 operations are performed
  #+BEGIN_SRC js
    const input = [1,2];
    for (let i = 0; i < input.length; i++) {
        for (let j = 0; j < input.length; j++) {
            console.log('hi');
        }
    }
  #+END_SRC
  #+RESULTS:
  : hi
  : hi
  : hi
  : hi
  : undefined
  + if the input length is 10, it does 100 operations
- /O(2n^2 + 5n + 4)/ - if there's 10 items in the input, 50 operations are performed
  #+BEGIN_SRC js
    const input = [1,2];

    function foo() {
        for (let i = 0; i < input.length; i++) {
            for (let j = 0; j < input.length; j++) {
                console.log('hi');
            }
        }
        for (let i = 0; i < input.length; i++) {
            for (let j = 0; j < input.length; j++) {
                console.log('hi');
            }
        }

        for (let i = 0; i < input.length; i++) {
            console.log('hi');
        }
        for (let i = 0; i < input.length; i++) {
            console.log('hi');
        }
        for (let i = 0; i < input.length; i++) {
            console.log('hi');
        }
        for (let i = 0; i < input.length; i++) {
            console.log('hi');
        }
        for (let i = 0; i < input.length; i++) {
            console.log('hi');
        }
        console.log(input.length);
        console.log(input.length);
        console.log(input.length);
        console.log(input.length);
    }
  #+END_SRC
  + 2n^2 + 5n + 4 is *not* the big O notation
    * remove the coefficients -> n^2 + n + 4
    * keep only the highest , which is n^2, so it's O(n^2)
  + best case scenario is O(1) if you search and it's in the first one
  + worst case is going through every item in the array O(n^2) and the big complexity is the wprst case
* js
#+DATE:2019-08-29
- js
  #+BEGIN_SRC js
  
  #+END_SRC
