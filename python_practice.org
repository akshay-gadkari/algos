* Valid Parentheses
#+BEGIN_SRC python :results output
  open_list = ["[","{","("] 
  close_list = ["]","}",")"] 
  s = '({[]})'
  def valid_parentheses(s):
      stack = []
      for i in s:
          if i in open_list:
              stack.append(i)
              print(stack)
          elif i in close_list:
              position = close_list.index(i)
              if ((len(stack) > 0) and (open_list[position] == stack[len(stack)-1])):
                  stack.pop()
              else:
                  print('Unbalanced')
                  return 'Unbalanced'
      if len(stack) == 0:
          print('Balanced')
          return 'Balanced'
  valid_parentheses(s)
#+END_SRC

#+RESULTS:
: Balanced
* Sock Merchant
John works at a clothing store. He has a large pile of socks that he must pair by color for sale. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.

For example, there are n = 7 socks with colors ar = [1,2,1,2,1,3,2]. There is one pair of color and one of color . There are three odd socks left, one of each color. The number of pairs is 2.

Function Description

Complete the sockMerchant function in the editor below. It must return an integer representing the number of matching pairs of socks that are available.

sockMerchant has the following parameter(s):

    n: the number of socks in the pile
    ar: the colors of each sock

Return the total number of matching pairs of socks that John can sell.

#+BEGIN_SRC python :results output
  ar = [1,2,1,2,1,3,2]
  n = len(ar)
  def sock_merchant(n, ar):
      d = {}
      results = 0
      for i in ar:
          if i in d:
              d[i] += 1
          else:
              d[i] = 1
      # print(d)
      for i in d:
          # print(d[i] // 2)
          results += d[i] // 2
      print(results, 'pairs')

  sock_merchant(n, ar)
#+END_SRC

#+RESULTS:
: {1: 3, 2: 3, 3: 1}
: 1
: 1
: 0
: 2 pairs
* Counting Valleys
#+BEGIN_SRC python :results output
  path = 'UDDDUDUU'
  n = len(path)
  def counting_valleys(n, path):
      altitude = 0
      valleys = 0
      for i in path:
          if i == 'D' and altitude == 0:
              valleys += 1
          if i == 'D':
              altitude -= 1
          if i == 'U':
              altitude += 1
      print(valleys)
      return valleys

  counting_valleys(n, path)
#+END_SRC

#+RESULTS:
: 1
* Jumping on the Clouds
#+BEGIN_SRC python :results output
  clouds = [0,1,0,0,0,1,0]
  def jumpingOnClouds(clouds):
      # for i in range(len(clouds)):
      #     try:
      #         if clouds[i+2] != None and clouds[i+2] == 0:
      #             print(i)
      #             i += 2
      #             print('moving', i)
      #             continue # continues one forward instead of 2
      #         if clouds[i+1] != None and clouds[i+1] == 1:
      #             if clouds[i+2] != None and clouds[i+2] == 1:
      #                 i += 1
      #                 print(i)
      #                 continue
      #     except:
      #         continue
      i = 0
      list = []
      while i < len(clouds):
          try:
              if clouds[i+2] == 0:
                  print(i)
                  i += 2
                  continue
              if clouds[i+1] == 0:
                  print(i)
                  i += 1
                  continue
          except:
              continue
  jumpingOnClouds(clouds)

#+END_SRC

#+RESULTS:
: 0
: moving 2
: 1
: moving 3
: 2
: moving 4
: 4
: moving 6
* pivot
Good morning! Here's your coding interview problem for today.

This problem was asked by Amazon.

Given a pivot x, and a list lst, partition the list into three parts.

The first part contains all elements in lst that are less than x
The second part contains all elements in lst that are equal to x
The third part contains all elements in lst that are larger than x
Ordering within a part can be arbitrary.

For example, given x = 10 and lst = [9, 12, 3, 5, 14, 10, 10], 
one (possible correct answer) partition may be [9, 3, 5, 10, 10, 12, 14].


#+BEGIN_SRC python :results output

  x = 10
  lst = [9, 3, 5, 10, 10, 12, 14];
  def partitionList(x, lst):
    
  partitionList(x, lst));

#+END_SRC

#+RESULTS:
